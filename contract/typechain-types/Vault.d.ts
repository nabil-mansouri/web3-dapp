/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "LENGTH()": FunctionFragment;
    "auctionEnd()": FunctionFragment;
    "auctionState()": FunctionFragment;
    "bid()": FunctionFragment;
    "cash()": FunctionFragment;
    "curator()": FunctionFragment;
    "end()": FunctionFragment;
    "fractions()": FunctionFragment;
    "fractionsID()": FunctionFragment;
    "id()": FunctionFragment;
    "isLivePrice(uint256)": FunctionFragment;
    "livePrice()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onTransfer(address,address,uint256)": FunctionFragment;
    "priceToCount(uint256)": FunctionFragment;
    "redeem()": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "settings()": FunctionFragment;
    "start()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingID()": FunctionFragment;
    "updateUserPrice(uint256)": FunctionFragment;
    "userPrices(address)": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
    "winning()": FunctionFragment;
    "withdrawERC1155(address,uint256,uint256)": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LENGTH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(functionFragment: "curator", values?: undefined): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "fractions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fractionsID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isLivePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "livePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceToCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userPrices", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "winning", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LENGTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctionEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fractions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fractionsID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLivePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "livePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceToCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winning", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "Bid(address,uint256)": EventFragment;
    "Cash(address,uint256)": EventFragment;
    "PriceUpdate(address,uint256)": EventFragment;
    "Redeem(address)": EventFragment;
    "Start(address,uint256)": EventFragment;
    "WithdrawERC1155(address,uint256,uint256,address)": EventFragment;
    "WithdrawERC20(address,address)": EventFragment;
    "WithdrawERC721(address,uint256,address)": EventFragment;
    "WithdrawETH(address)": EventFragment;
    "Won(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Won"): EventFragment;
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VaultInterface;

  functions: {
    LENGTH(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "LENGTH()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    auctionEnd(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "auctionEnd()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    auctionState(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "auctionState()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    bid(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "bid()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    cash(overrides?: Overrides): Promise<ContractTransaction>;

    "cash()"(overrides?: Overrides): Promise<ContractTransaction>;

    curator(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "curator()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    end(overrides?: Overrides): Promise<ContractTransaction>;

    "end()"(overrides?: Overrides): Promise<ContractTransaction>;

    fractions(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "fractions()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    fractionsID(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "fractionsID()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    id(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "id()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isLivePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLivePrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    livePrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "livePrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    priceToCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "priceToCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    redeem(overrides?: Overrides): Promise<ContractTransaction>;

    "redeem()"(overrides?: Overrides): Promise<ContractTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<{
      voting: BigNumber;
      reserve: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "reservePrice()"(overrides?: CallOverrides): Promise<{
      voting: BigNumber;
      reserve: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    settings(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "settings()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    start(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "start()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    underlying(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "underlying()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    underlyingID(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "underlyingID()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    updateUserPrice(
      _new: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUserPrice(uint256)"(
      _new: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userPrices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    version(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    weth(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "weth()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    winning(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "winning()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    withdrawERC1155(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawERC1155(address,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawERC20(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawERC721(address,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawETH(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawETH()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  "LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

  auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionEnd()"(overrides?: CallOverrides): Promise<BigNumber>;

  auctionState(overrides?: CallOverrides): Promise<number>;

  "auctionState()"(overrides?: CallOverrides): Promise<number>;

  bid(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "bid()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  cash(overrides?: Overrides): Promise<ContractTransaction>;

  "cash()"(overrides?: Overrides): Promise<ContractTransaction>;

  curator(overrides?: CallOverrides): Promise<string>;

  "curator()"(overrides?: CallOverrides): Promise<string>;

  end(overrides?: Overrides): Promise<ContractTransaction>;

  "end()"(overrides?: Overrides): Promise<ContractTransaction>;

  fractions(overrides?: CallOverrides): Promise<string>;

  "fractions()"(overrides?: CallOverrides): Promise<string>;

  fractionsID(overrides?: CallOverrides): Promise<BigNumber>;

  "fractionsID()"(overrides?: CallOverrides): Promise<BigNumber>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  "id()"(overrides?: CallOverrides): Promise<BigNumber>;

  isLivePrice(
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLivePrice(uint256)"(
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  livePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "livePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onTransfer(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  priceToCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceToCount(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(overrides?: Overrides): Promise<ContractTransaction>;

  "redeem()"(overrides?: Overrides): Promise<ContractTransaction>;

  reservePrice(overrides?: CallOverrides): Promise<{
    voting: BigNumber;
    reserve: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "reservePrice()"(overrides?: CallOverrides): Promise<{
    voting: BigNumber;
    reserve: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  settings(overrides?: CallOverrides): Promise<string>;

  "settings()"(overrides?: CallOverrides): Promise<string>;

  start(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "start()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  underlyingID(overrides?: CallOverrides): Promise<BigNumber>;

  "underlyingID()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateUserPrice(
    _new: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUserPrice(uint256)"(
    _new: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userPrices(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  winning(overrides?: CallOverrides): Promise<string>;

  "winning()"(overrides?: CallOverrides): Promise<string>;

  withdrawERC1155(
    _token: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawERC1155(address,uint256,uint256)"(
    _token: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawERC20(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawERC721(address,uint256)"(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawETH(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawETH()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionEnd()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionState(overrides?: CallOverrides): Promise<number>;

    "auctionState()"(overrides?: CallOverrides): Promise<number>;

    bid(overrides?: CallOverrides): Promise<void>;

    "bid()"(overrides?: CallOverrides): Promise<void>;

    cash(overrides?: CallOverrides): Promise<void>;

    "cash()"(overrides?: CallOverrides): Promise<void>;

    curator(overrides?: CallOverrides): Promise<string>;

    "curator()"(overrides?: CallOverrides): Promise<string>;

    end(overrides?: CallOverrides): Promise<void>;

    "end()"(overrides?: CallOverrides): Promise<void>;

    fractions(overrides?: CallOverrides): Promise<string>;

    "fractions()"(overrides?: CallOverrides): Promise<string>;

    fractionsID(overrides?: CallOverrides): Promise<BigNumber>;

    "fractionsID()"(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    isLivePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLivePrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    livePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "livePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "onTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceToCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceToCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(overrides?: CallOverrides): Promise<void>;

    "redeem()"(overrides?: CallOverrides): Promise<void>;

    reservePrice(overrides?: CallOverrides): Promise<{
      voting: BigNumber;
      reserve: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "reservePrice()"(overrides?: CallOverrides): Promise<{
      voting: BigNumber;
      reserve: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    settings(overrides?: CallOverrides): Promise<string>;

    "settings()"(overrides?: CallOverrides): Promise<string>;

    start(overrides?: CallOverrides): Promise<void>;

    "start()"(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    underlyingID(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingID()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserPrice(
      _new: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUserPrice(uint256)"(
      _new: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    winning(overrides?: CallOverrides): Promise<string>;

    "winning()"(overrides?: CallOverrides): Promise<string>;

    withdrawERC1155(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC1155(address,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(_token: string, overrides?: CallOverrides): Promise<void>;

    "withdrawERC20(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC721(address,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    "withdrawETH()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Bid(buyer: string | null, price: null): EventFilter;

    Cash(owner: string | null, shares: null): EventFilter;

    PriceUpdate(user: string | null, price: null): EventFilter;

    Redeem(redeemer: string | null): EventFilter;

    Start(buyer: string | null, price: null): EventFilter;

    WithdrawERC1155(
      token: string | null,
      tokenId: null,
      amount: null,
      to: string | null
    ): EventFilter;

    WithdrawERC20(token: string | null, to: string | null): EventFilter;

    WithdrawERC721(
      token: string | null,
      tokenId: null,
      to: string | null
    ): EventFilter;

    WithdrawETH(to: string | null): EventFilter;

    Won(buyer: string | null, price: null): EventFilter;
  };

  estimateGas: {
    LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    "LENGTH()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionEnd()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionState(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionState()"(overrides?: CallOverrides): Promise<BigNumber>;

    bid(overrides?: PayableOverrides): Promise<BigNumber>;

    "bid()"(overrides?: PayableOverrides): Promise<BigNumber>;

    cash(overrides?: Overrides): Promise<BigNumber>;

    "cash()"(overrides?: Overrides): Promise<BigNumber>;

    curator(overrides?: CallOverrides): Promise<BigNumber>;

    "curator()"(overrides?: CallOverrides): Promise<BigNumber>;

    end(overrides?: Overrides): Promise<BigNumber>;

    "end()"(overrides?: Overrides): Promise<BigNumber>;

    fractions(overrides?: CallOverrides): Promise<BigNumber>;

    "fractions()"(overrides?: CallOverrides): Promise<BigNumber>;

    fractionsID(overrides?: CallOverrides): Promise<BigNumber>;

    "fractionsID()"(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    isLivePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLivePrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    livePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "livePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    priceToCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceToCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(overrides?: Overrides): Promise<BigNumber>;

    "redeem()"(overrides?: Overrides): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "reservePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    "settings()"(overrides?: CallOverrides): Promise<BigNumber>;

    start(overrides?: PayableOverrides): Promise<BigNumber>;

    "start()"(overrides?: PayableOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingID(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingID()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserPrice(
      _new: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUserPrice(uint256)"(
      _new: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    winning(overrides?: CallOverrides): Promise<BigNumber>;

    "winning()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC1155(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawERC1155(address,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawERC20(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawERC20(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawERC721(address,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawETH(overrides?: Overrides): Promise<BigNumber>;

    "withdrawETH()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LENGTH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionEnd()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "bid()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    cash(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    curator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end(overrides?: Overrides): Promise<PopulatedTransaction>;

    "end()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    fractions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fractions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fractionsID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fractionsID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLivePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLivePrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    livePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "livePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    priceToCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceToCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(overrides?: Overrides): Promise<PopulatedTransaction>;

    "redeem()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reservePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "settings()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "start()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUserPrice(
      _new: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUserPrice(uint256)"(
      _new: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userPrices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "winning()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC1155(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawERC1155(address,uint256,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawERC20(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawERC721(address,uint256)"(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawETH()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
