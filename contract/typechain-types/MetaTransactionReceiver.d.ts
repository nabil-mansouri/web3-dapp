/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MetaTransactionReceiverInterface extends ethers.utils.Interface {
  functions: {
    "changeAdmin(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "isMetaTransactionProcessor(address)": FunctionFragment;
    "setMetaTransactionProcessor(address,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isMetaTransactionProcessor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaTransactionProcessor",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMetaTransactionProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaTransactionProcessor",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "MetaTransactionProcessor(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionProcessor"): EventFragment;
}

export class MetaTransactionReceiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MetaTransactionReceiverInterface;

  functions: {
    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  isMetaTransactionProcessor(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isMetaTransactionProcessor(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setMetaTransactionProcessor(
    metaTransactionProcessor: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMetaTransactionProcessor(address,bool)"(
    metaTransactionProcessor: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    MetaTransactionProcessor(
      metaTransactionProcessor: null,
      enabled: null
    ): EventFilter;
  };

  estimateGas: {
    changeAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
