/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LandInterface extends ethers.utils.Interface {
  functions: {
    "_burn(address,address,uint256)": FunctionFragment;
    "_numNFTPerAddress(address)": FunctionFragment;
    "_operators(uint256)": FunctionFragment;
    "_operatorsForAll(address,address)": FunctionFragment;
    "_owners(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveFor(address,address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchTransferFrom(address,address,uint256[],bytes)": FunctionFragment;
    "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "height()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isMetaTransactionProcessor(address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "isSuperOperator(address)": FunctionFragment;
    "maxQuad()": FunctionFragment;
    "mintQuad(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApprovalForAllFor(address,address,bool)": FunctionFragment;
    "setMetaTransactionProcessor(address,bool)": FunctionFragment;
    "setMinter(address,bool)": FunctionFragment;
    "setSuperOperator(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferQuad(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "width()": FunctionFragment;
    "x(uint256)": FunctionFragment;
    "y(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_burn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_numNFTPerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_operators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_operatorsForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferQuad",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "height", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetaTransactionProcessor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSuperOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "maxQuad", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintQuad",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAllFor",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaTransactionProcessor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuperOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferQuad",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "width", values?: undefined): string;
  encodeFunctionData(functionFragment: "x", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "y", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "_burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_numNFTPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_operators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_operatorsForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferQuad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "height", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMetaTransactionProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSuperOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxQuad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintQuad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAllFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaTransactionProcessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSuperOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferQuad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "width", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MetaTransactionProcessor(address,bool)": EventFragment;
    "Minter(address,bool)": EventFragment;
    "SuperOperator(address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionProcessor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Land extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LandInterface;

  functions: {
    _burn(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_burn(address,address,uint256)"(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "_numNFTPerAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    _operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_operators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_operatorsForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "_owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveFor(address,address,uint256)"(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burn(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    "burn(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnFrom(address,uint256)"(
      from: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    height(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "height()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      isOperator: boolean;
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      isOperator: boolean;
      0: boolean;
    }>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isMinter(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isMinter(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSuperOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSuperOperator(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    maxQuad(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxQuad()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintQuad(address,uint256,uint256,uint256,bytes)"(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    "ownerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAllFor(address,address,bool)"(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinter(address,bool)"(
      minter: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSuperOperator(address,bool)"(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenURI(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferQuad(address,address,uint256,uint256,uint256,bytes)"(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    width(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "width()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    x(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "x(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    y(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "y(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  _burn(
    from: string,
    owner: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_burn(address,address,uint256)"(
    from: string,
    owner: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _numNFTPerAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_numNFTPerAddress(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "_operators(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _operatorsForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_operatorsForAll(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_owners(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    operator: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    operator: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveFor(
    sender: string,
    operator: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveFor(address,address,uint256)"(
    sender: string,
    operator: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTransferFrom(address,address,uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchTransferQuad(
    from: string,
    to: string,
    sizes: BigNumberish[],
    xs: BigNumberish[],
    ys: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    sizes: BigNumberish[],
    xs: BigNumberish[],
    ys: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burn(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "burn(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnFrom(
    from: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnFrom(address,uint256)"(
    from: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getApproved(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getApproved(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  height(overrides?: CallOverrides): Promise<BigNumber>;

  "height()"(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMetaTransactionProcessor(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isMetaTransactionProcessor(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(who: string, overrides?: CallOverrides): Promise<boolean>;

  "isMinter(address)"(who: string, overrides?: CallOverrides): Promise<boolean>;

  isSuperOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

  "isSuperOperator(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxQuad(overrides?: CallOverrides): Promise<BigNumber>;

  "maxQuad()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintQuad(
    to: string,
    size: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintQuad(address,uint256,uint256,uint256,bytes)"(
    to: string,
    size: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAllFor(
    sender: string,
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAllFor(address,address,bool)"(
    sender: string,
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMetaTransactionProcessor(
    metaTransactionProcessor: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMetaTransactionProcessor(address,bool)"(
    metaTransactionProcessor: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinter(
    minter: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinter(address,bool)"(
    minter: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSuperOperator(
    superOperator: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSuperOperator(address,bool)"(
    superOperator: string,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "supportsInterface(bytes4)"(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferQuad(
    from: string,
    to: string,
    size: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferQuad(address,address,uint256,uint256,uint256,bytes)"(
    from: string,
    to: string,
    size: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  width(overrides?: CallOverrides): Promise<BigNumber>;

  "width()"(overrides?: CallOverrides): Promise<BigNumber>;

  x(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "x(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  y(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "y(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _burn(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_burn(address,address,uint256)"(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_numNFTPerAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "_operators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_operatorsForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      operator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveFor(address,address,uint256)"(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnFrom(address,uint256)"(
      from: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getApproved(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getApproved(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    height(overrides?: CallOverrides): Promise<BigNumber>;

    "height()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(who: string, overrides?: CallOverrides): Promise<boolean>;

    "isMinter(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<boolean>;

    "isSuperOperator(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxQuad(overrides?: CallOverrides): Promise<BigNumber>;

    "maxQuad()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintQuad(address,uint256,uint256,uint256,bytes)"(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAllFor(address,address,bool)"(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinter(address,bool)"(
      minter: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSuperOperator(address,bool)"(
      superOperator: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferQuad(address,address,uint256,uint256,uint256,bytes)"(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    width(overrides?: CallOverrides): Promise<BigNumber>;

    "width()"(overrides?: CallOverrides): Promise<BigNumber>;

    x(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "x(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    y(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "y(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AdminChanged(oldAdmin: null, newAdmin: null): EventFilter;

    Approval(
      _owner: string | null,
      _approved: string | null,
      _tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      _owner: string | null,
      _operator: string | null,
      _approved: null
    ): EventFilter;

    MetaTransactionProcessor(
      metaTransactionProcessor: null,
      enabled: null
    ): EventFilter;

    Minter(superOperator: null, enabled: null): EventFilter;

    SuperOperator(superOperator: null, enabled: null): EventFilter;

    Transfer(
      _from: string | null,
      _to: string | null,
      _tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    _burn(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_burn(address,address,uint256)"(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_numNFTPerAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_operators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_operatorsForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveFor(address,address,uint256)"(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burn(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnFrom(address,uint256)"(
      from: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    height(overrides?: CallOverrides): Promise<BigNumber>;

    "height()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMinter(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSuperOperator(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isSuperOperator(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxQuad(overrides?: CallOverrides): Promise<BigNumber>;

    "maxQuad()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintQuad(address,uint256,uint256,uint256,bytes)"(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ownerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAllFor(address,address,bool)"(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinter(address,bool)"(
      minter: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSuperOperator(address,bool)"(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenURI(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferQuad(address,address,uint256,uint256,uint256,bytes)"(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    width(overrides?: CallOverrides): Promise<BigNumber>;

    "width()"(overrides?: CallOverrides): Promise<BigNumber>;

    x(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "x(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    y(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "y(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _burn(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_burn(address,address,uint256)"(
      from: string,
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _numNFTPerAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_numNFTPerAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_operators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _operatorsForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_operatorsForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_owners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveFor(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveFor(address,address,uint256)"(
      sender: string,
      operator: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchTransferQuad(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTransferQuad(address,address,uint256[],uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      sizes: BigNumberish[],
      xs: BigNumberish[],
      ys: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burn(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      from: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnFrom(address,uint256)"(
      from: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    height(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "height()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMetaTransactionProcessor(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMetaTransactionProcessor(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMinter(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSuperOperator(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSuperOperator(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxQuad(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxQuad()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintQuad(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintQuad(address,uint256,uint256,uint256,bytes)"(
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAllFor(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAllFor(address,address,bool)"(
      sender: string,
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMetaTransactionProcessor(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMetaTransactionProcessor(address,bool)"(
      metaTransactionProcessor: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinter(
      minter: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinter(address,bool)"(
      minter: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSuperOperator(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSuperOperator(address,bool)"(
      superOperator: string,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferQuad(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferQuad(address,address,uint256,uint256,uint256,bytes)"(
      from: string,
      to: string,
      size: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    width(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "width()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    x(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "x(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    y(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "y(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
