/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenManagerImplInterface extends ethers.utils.Interface {
  functions: {
    "acceptBuyOrder(uint256)": FunctionFragment;
    "acceptSellOrder(uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256,bytes)": FunctionFragment;
    "buyCounter()": FunctionFragment;
    "buyOrders(uint256)": FunctionFragment;
    "buyOrdersByOwner(address,uint256)": FunctionFragment;
    "countERC1155()": FunctionFragment;
    "countERC721()": FunctionFragment;
    "decimals()": FunctionFragment;
    "defaultOperators()": FunctionFragment;
    "deleteBuyOrder(uint256)": FunctionFragment;
    "deleteSellOrder(uint256)": FunctionFragment;
    "granularity()": FunctionFragment;
    "isOperatorFor(address,address)": FunctionFragment;
    "makeBuyOrderCoin(uint256,bool)": FunctionFragment;
    "makeBuyOrderToken(uint256,uint256,address,bool)": FunctionFragment;
    "makeSellOrder(uint256,uint256,address,bool)": FunctionFragment;
    "myId()": FunctionFragment;
    "name()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "nftId()": FunctionFragment;
    "nftOwner()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "operatorBurn(address,uint256,bytes,bytes)": FunctionFragment;
    "operatorSend(address,address,uint256,bytes,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "sellCounter()": FunctionFragment;
    "sellOrders(uint256)": FunctionFragment;
    "sellOrdersByOwner(address,uint256)": FunctionFragment;
    "send(address,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenGeneratorAddress()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradeCounter()": FunctionFragment;
    "trades(uint256)": FunctionFragment;
    "tradesByAddress(address,uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBuyOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSellOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrdersByOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countERC1155",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countERC721",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteBuyOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSellOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBuyOrderCoin",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBuyOrderToken",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSellOrder",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "myId", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftId", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorBurn",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorSend",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrdersByOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenGeneratorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradesByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyOrdersByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBuyOrderCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBuyOrderToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellOrdersByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenGeneratorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradesByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "Burned(address,address,uint256,bytes,bytes)": EventFragment;
    "Minted(address,address,uint256,bytes,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "Sent(address,address,address,uint256,bytes,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class TokenManagerImpl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenManagerImplInterface;

  functions: {
    acceptBuyOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    acceptSellOrder(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "acceptSellOrder(uint256,uint256)"(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyCounter(overrides?: CallOverrides): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    "buyCounter()"(overrides?: CallOverrides): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    "buyOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    buyOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "buyOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    countERC1155(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countERC1155()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    countERC721(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "countERC721()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    defaultOperators(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "defaultOperators()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    deleteBuyOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteSellOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteSellOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    granularity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "granularity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    makeBuyOrderCoin(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "makeBuyOrderCoin(uint256,bool)"(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    makeBuyOrderToken(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeBuyOrderToken(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    makeSellOrder(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeSellOrder(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    myId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "myId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nftAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "nftAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nftId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nftId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    nftOwner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "nftOwner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellCounter(overrides?: CallOverrides): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    "sellCounter()"(overrides?: CallOverrides): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    "sellOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    sellOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "sellOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenGeneratorAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tokenGeneratorAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tradeCounter(overrides?: CallOverrides): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    "tradeCounter()"(overrides?: CallOverrides): Promise<{
      _value: BigNumber;
      0: BigNumber;
    }>;

    trades(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      orderId: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      currency: string;
      at: BigNumber;
      buyer: string;
      seller: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: string;
      7: string;
    }>;

    "trades(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      orderId: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      currency: string;
      at: BigNumber;
      buyer: string;
      seller: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: string;
      7: string;
    }>;

    tradesByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tradesByAddress(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  acceptBuyOrder(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBuyOrder(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  acceptSellOrder(
    id: BigNumberish,
    tokenPay: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "acceptSellOrder(uint256,uint256)"(
    id: BigNumberish,
    tokenPay: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  allowance(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    holder: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorizeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(tokenHolder: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256,bytes)"(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "buyCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    amount: BigNumber;
    amountExecuted: BigNumber;
    cost: BigNumber;
    costExecuted: BigNumber;
    currency: string;
    fillOrKill: boolean;
    at: BigNumber;
    owner: string;
    buy: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: boolean;
    7: BigNumber;
    8: string;
    9: boolean;
  }>;

  "buyOrders(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    amount: BigNumber;
    amountExecuted: BigNumber;
    cost: BigNumber;
    costExecuted: BigNumber;
    currency: string;
    fillOrKill: boolean;
    at: BigNumber;
    owner: string;
    buy: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: boolean;
    7: BigNumber;
    8: string;
    9: boolean;
  }>;

  buyOrdersByOwner(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyOrdersByOwner(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countERC1155(overrides?: CallOverrides): Promise<BigNumber>;

  "countERC1155()"(overrides?: CallOverrides): Promise<BigNumber>;

  countERC721(overrides?: CallOverrides): Promise<BigNumber>;

  "countERC721()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  defaultOperators(overrides?: CallOverrides): Promise<string[]>;

  "defaultOperators()"(overrides?: CallOverrides): Promise<string[]>;

  deleteBuyOrder(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteBuyOrder(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteSellOrder(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteSellOrder(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  granularity(overrides?: CallOverrides): Promise<BigNumber>;

  "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

  isOperatorFor(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperatorFor(address,address)"(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeBuyOrderCoin(
    amount: BigNumberish,
    fillOrKill: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "makeBuyOrderCoin(uint256,bool)"(
    amount: BigNumberish,
    fillOrKill: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  makeBuyOrderToken(
    amount: BigNumberish,
    cost: BigNumberish,
    currency: string,
    fillOrKill: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeBuyOrderToken(uint256,uint256,address,bool)"(
    amount: BigNumberish,
    cost: BigNumberish,
    currency: string,
    fillOrKill: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  makeSellOrder(
    amount: BigNumberish,
    cost: BigNumberish,
    currency: string,
    fillOrKill: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeSellOrder(uint256,uint256,address,bool)"(
    amount: BigNumberish,
    cost: BigNumberish,
    currency: string,
    fillOrKill: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  myId(overrides?: CallOverrides): Promise<BigNumber>;

  "myId()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  "nftAddress()"(overrides?: CallOverrides): Promise<string>;

  nftId(overrides?: CallOverrides): Promise<BigNumber>;

  "nftId()"(overrides?: CallOverrides): Promise<BigNumber>;

  nftOwner(overrides?: CallOverrides): Promise<string>;

  "nftOwner()"(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operatorBurn(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorBurn(address,uint256,bytes,bytes)"(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operatorSend(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorSend(address,address,uint256,bytes,bytes)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "sellCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  sellOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    amount: BigNumber;
    amountExecuted: BigNumber;
    cost: BigNumber;
    costExecuted: BigNumber;
    currency: string;
    fillOrKill: boolean;
    at: BigNumber;
    owner: string;
    buy: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: boolean;
    7: BigNumber;
    8: string;
    9: boolean;
  }>;

  "sellOrders(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    amount: BigNumber;
    amountExecuted: BigNumber;
    cost: BigNumber;
    costExecuted: BigNumber;
    currency: string;
    fillOrKill: boolean;
    at: BigNumber;
    owner: string;
    buy: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: string;
    6: boolean;
    7: BigNumber;
    8: string;
    9: boolean;
  }>;

  sellOrdersByOwner(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sellOrdersByOwner(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  send(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "send(address,uint256,bytes)"(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenGeneratorAddress(overrides?: CallOverrides): Promise<string>;

  "tokenGeneratorAddress()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  tradeCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "tradeCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  trades(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    orderId: BigNumber;
    amount: BigNumber;
    cost: BigNumber;
    currency: string;
    at: BigNumber;
    buyer: string;
    seller: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: BigNumber;
    6: string;
    7: string;
  }>;

  "trades(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    orderId: BigNumber;
    amount: BigNumber;
    cost: BigNumber;
    currency: string;
    at: BigNumber;
    buyer: string;
    seller: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: BigNumber;
    6: string;
    7: string;
  }>;

  tradesByAddress(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tradesByAddress(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    acceptBuyOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "acceptBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    acceptSellOrder(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "acceptSellOrder(uint256,uint256)"(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    buyCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "buyCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    "buyOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    buyOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countERC1155(overrides?: CallOverrides): Promise<BigNumber>;

    "countERC1155()"(overrides?: CallOverrides): Promise<BigNumber>;

    countERC721(overrides?: CallOverrides): Promise<BigNumber>;

    "countERC721()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    defaultOperators(overrides?: CallOverrides): Promise<string[]>;

    "defaultOperators()"(overrides?: CallOverrides): Promise<string[]>;

    deleteBuyOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deleteBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteSellOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deleteSellOrder(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeBuyOrderCoin(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "makeBuyOrderCoin(uint256,bool)"(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeBuyOrderToken(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "makeBuyOrderToken(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeSellOrder(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "makeSellOrder(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    myId(overrides?: CallOverrides): Promise<BigNumber>;

    "myId()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    "nftAddress()"(overrides?: CallOverrides): Promise<string>;

    nftId(overrides?: CallOverrides): Promise<BigNumber>;

    "nftId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftOwner(overrides?: CallOverrides): Promise<string>;

    "nftOwner()"(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sellCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "sellCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    "sellOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      amount: BigNumber;
      amountExecuted: BigNumber;
      cost: BigNumber;
      costExecuted: BigNumber;
      currency: string;
      fillOrKill: boolean;
      at: BigNumber;
      owner: string;
      buy: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: string;
      6: boolean;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    sellOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenGeneratorAddress(overrides?: CallOverrides): Promise<string>;

    "tokenGeneratorAddress()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    trades(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      orderId: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      currency: string;
      at: BigNumber;
      buyer: string;
      seller: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: string;
      7: string;
    }>;

    "trades(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      orderId: BigNumber;
      amount: BigNumber;
      cost: BigNumber;
      currency: string;
      at: BigNumber;
      buyer: string;
      seller: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: string;
      7: string;
    }>;

    tradesByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradesByAddress(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;

    "withdraw()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Burned(
      operator: string | null,
      from: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    Minted(
      operator: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Sent(
      operator: string | null,
      from: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    acceptBuyOrder(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "acceptBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    acceptSellOrder(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "acceptSellOrder(uint256,uint256)"(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "buyCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countERC1155(overrides?: CallOverrides): Promise<BigNumber>;

    "countERC1155()"(overrides?: CallOverrides): Promise<BigNumber>;

    countERC721(overrides?: CallOverrides): Promise<BigNumber>;

    "countERC721()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    defaultOperators(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultOperators()"(overrides?: CallOverrides): Promise<BigNumber>;

    deleteBuyOrder(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deleteBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteSellOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteSellOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBuyOrderCoin(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "makeBuyOrderCoin(uint256,bool)"(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    makeBuyOrderToken(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeBuyOrderToken(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    makeSellOrder(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeSellOrder(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    myId(overrides?: CallOverrides): Promise<BigNumber>;

    "myId()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftId(overrides?: CallOverrides): Promise<BigNumber>;

    "nftId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nftOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    revokeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "sellCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenGeneratorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenGeneratorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradeCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    trades(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "trades(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradesByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradesByAddress(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBuyOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    acceptSellOrder(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "acceptSellOrder(uint256,uint256)"(
      id: BigNumberish,
      tokenPay: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      holder: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countERC1155(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countERC1155()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countERC721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countERC721()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "defaultOperators()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteBuyOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteBuyOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteSellOrder(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteSellOrder(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "granularity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeBuyOrderCoin(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "makeBuyOrderCoin(uint256,bool)"(
      amount: BigNumberish,
      fillOrKill: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    makeBuyOrderToken(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeBuyOrderToken(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    makeSellOrder(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeSellOrder(uint256,uint256,address,bool)"(
      amount: BigNumberish,
      cost: BigNumberish,
      currency: string,
      fillOrKill: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    myId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "myId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellOrders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellOrdersByOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellOrdersByOwner(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenGeneratorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenGeneratorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tradeCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trades(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "trades(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradesByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tradesByAddress(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
